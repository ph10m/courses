{"remainingRequest":"/Users/tollef/Documents/courses/GraphQL/tutorial/node_modules/ts-loader/index.js??ref--16-1!/Users/tollef/Documents/courses/GraphQL/tutorial/packages/server/src/resolvers.ts","dependencies":[{"path":"/Users/tollef/Documents/courses/GraphQL/tutorial/packages/server/src/resolvers.ts","mtime":1613085744677},{"path":"/Users/tollef/Documents/courses/GraphQL/tutorial/node_modules/cache-loader/dist/cjs.js","mtime":1613078739927},{"path":"/Users/tollef/Documents/courses/GraphQL/tutorial/node_modules/ts-loader/index.js","mtime":1613078743927}],"contextDependencies":[],"result":[";\nimport employees from '../../../MOCK_DATA.json';\nvar getEmployee = function (id) { return employees[id]; };\nexport default {\n    Query: {\n        employee: function (obj, _a) {\n            var id = _a.id;\n            return getEmployee(id);\n        },\n        employees: function (obj, _a) {\n            var num = _a.num, city = _a.city;\n            var tmp = employees.slice();\n            if (city) {\n                tmp = tmp.filter((function (employee) { return employee.officeLocation === city; }));\n            }\n            return tmp.slice(0, num);\n        }\n    },\n    Mutation: {\n        addEmployee: function (obj, _a) {\n            var employee = _a.employee;\n            console.log(\"adding?\", employee);\n            var invalid = employees.filter(function (oldEmployee) { return oldEmployee.name === employee.name; }).length >= 1;\n            if (invalid) {\n                return {\n                    success: false,\n                    message: employee.name + \" already exists\"\n                };\n            }\n            employees.push(employee);\n            return {\n                success: true,\n                message: \"Added \" + employee[\"name\"]\n            };\n        }\n    }\n};\n",{"version":3,"file":"/Users/tollef/Documents/courses/GraphQL/tutorial/packages/server/src/resolvers.ts","sourceRoot":"","sources":["/Users/tollef/Documents/courses/GraphQL/tutorial/packages/server/src/resolvers.ts"],"names":[],"mappings":"AAEC,CAAC;AAgBF,OAAO,SAAS,MAAM,yBAAyB,CAAC;AAChD,IAAM,WAAW,GAAG,UAAC,EAAU,IAAK,OAAA,SAAS,CAAC,EAAE,CAAC,EAAb,CAAa,CAAC;AAElD,eAAe;IACb,KAAK,EAAE;QACL,QAAQ,YAAC,GAAQ,EAAE,EAAyB;gBAAvB,UAAE;YACrB,OAAO,WAAW,CAAC,EAAE,CAAC,CAAC;QACzB,CAAC;QACD,SAAS,YAAC,GAAQ,EAAE,EAA6B;gBAA3B,YAAG,EAAE,cAAI;YAC7B,IAAI,GAAG,GAAO,SAAS,QAAC,CAAC;YACzB,IAAI,IAAI,EAAE;gBACR,GAAG,GAAG,GAAG,CAAC,MAAM,CACd,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,cAAc,KAAK,IAAI,EAAhC,CAAgC,CAAC,CAAC,CAAC;aACnD;YACD,OAAO,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAA;QAC1B,CAAC;KACF;IACD,QAAQ,EAAE;QACR,WAAW,YAAC,GAAQ,EAAE,EAA4B;gBAA1B,sBAAQ;YAC9B,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAA;YAChC,IAAM,OAAO,GAAG,SAAS,CAAC,MAAM,CAAC,UAAC,WAAqB,IAAK,OAAA,WAAW,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,EAAlC,CAAkC,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC;YAC5G,IAAI,OAAO,EAAE;gBACX,OAAO;oBACL,OAAO,EAAE,KAAK;oBACd,OAAO,EAAE,QAAQ,CAAC,IAAI,GAAG,iBAAiB;iBAC3C,CAAA;aACF;YACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACzB,OAAO;gBACL,OAAO,EAAE,IAAI;gBACb,OAAO,EAAE,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC;aACrC,CAAA;QACH,CAAC;KACF;CACF,CAAC","sourcesContent":["interface employeeInputType {\n  id: number\n};\n\ninterface Employee {\n  name: string\n  number: string\n  officeLocation: string\n}\ninterface employeeInput {\n  employee: Employee\n}\n\ninterface employeesInput {\n  num: number,\n  city: string\n}\n\nimport employees from '../../../MOCK_DATA.json';\nconst getEmployee = (id: number) => employees[id];\n\nexport default {\n  Query: {\n    employee(obj: any, { id }: employeeInputType) {\n      return getEmployee(id);\n    },\n    employees(obj: any, { num, city }: employeesInput) {\n      let tmp = [...employees];\n      if (city) {\n        tmp = tmp.filter(\n          (employee => employee.officeLocation === city));\n      }\n      return tmp.slice(0, num)\n    }\n  },\n  Mutation: {\n    addEmployee(obj: any, { employee } : employeeInput) {\n      console.log(\"adding?\", employee)\n      const invalid = employees.filter((oldEmployee: Employee) => oldEmployee.name === employee.name).length >= 1;\n      if (invalid) {\n        return {\n          success: false,\n          message: employee.name + \" already exists\"\n        }\n      }\n      employees.push(employee);\n      return {\n        success: true,\n        message: \"Added \" + employee[\"name\"]\n      }\n    }\n  }\n};\n"]}]}